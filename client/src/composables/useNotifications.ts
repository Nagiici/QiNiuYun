import { ref, onMounted, onUnmounted } from 'vue';
import { wsService, type NotificationData } from '@/services/websocketService';
import { useRouter } from 'vue-router';
import { useGlobalStore } from '@/stores/global';

export function useNotifications() {
  const router = useRouter();
  const globalStore = useGlobalStore();

  const isConnected = ref(false);
  const notificationPermission = ref<NotificationPermission>('default');
  const unreadCount = ref(0);
  const notifications = ref<NotificationData[]>([]);

  // ÂàùÂßãÂåñWebSocketËøûÊé•
  const initializeWebSocket = () => {
    wsService.connect();

    // ÁõëÂê¨ËøûÊé•Áä∂ÊÄÅ
    wsService.on('connected', () => {
      isConnected.value = true;
      console.log('üîó WebSocketÈÄöÁü•ÊúçÂä°Â∑≤ËøûÊé•');
    });

    wsService.on('disconnected', () => {
      isConnected.value = false;
      console.log('üì¥ WebSocketÈÄöÁü•ÊúçÂä°Â∑≤Êñ≠ÂºÄ');
    });

    // ÁõëÂê¨ÈÄöÁü•
    wsService.on('notification', handleNotification);

    // ÁõëÂê¨ÈÄöÁü•ÁÇπÂáª
    wsService.on('notification_clicked', handleNotificationClick);
  };

  // Â§ÑÁêÜÊî∂Âà∞ÁöÑÈÄöÁü•
  const handleNotification = (notification: NotificationData) => {
    console.log('üîî Â§ÑÁêÜÈÄöÁü•:', notification);

    // Ê∑ªÂä†Âà∞ÈÄöÁü•ÂàóË°®
    notifications.value.unshift(notification);

    // Êõ¥Êñ∞Êú™ËØªËÆ°Êï∞
    if (notification.type === 'proactive_message') {
      unreadCount.value++;
    }

    // ÊòæÁ§∫Â∫îÁî®ÂÜÖÈÄöÁü•
    showInAppNotification(notification);
  };

  // ÊòæÁ§∫Â∫îÁî®ÂÜÖÈÄöÁü•
  const showInAppNotification = (notification: NotificationData) => {
    if (notification.type === 'proactive_message' && notification.message) {
      globalStore.showNotification(
        `${notification.message.character_name}: ${notification.message.content}`,
        'info',
        {
          duration: 5000,
          action: {
            label: 'Êü•Áúã',
            handler: () => handleNotificationClick(notification)
          }
        }
      );
    }
  };

  // Â§ÑÁêÜÈÄöÁü•ÁÇπÂáª
  const handleNotificationClick = (notification: NotificationData) => {
    if (notification.sessionId) {
      // Ë∑≥ËΩ¨Âà∞ÂØπÂ∫îÁöÑËÅäÂ§©‰ºöËØù
      router.push(`/chat/${notification.sessionId.replace(/[^0-9]/g, '')}`);
      markNotificationAsRead(notification);
    }
  };

  // Ê†áËÆ∞ÈÄöÁü•‰∏∫Â∑≤ËØª
  const markNotificationAsRead = (notification: NotificationData) => {
    const index = notifications.value.findIndex(n => n === notification);
    if (index > -1) {
      notifications.value.splice(index, 1);
      if (notification.type === 'proactive_message') {
        unreadCount.value = Math.max(0, unreadCount.value - 1);
      }
    }
  };

  // Ê∏ÖÈô§ÊâÄÊúâÈÄöÁü•
  const clearAllNotifications = () => {
    notifications.value = [];
    unreadCount.value = 0;
  };

  // Ê≥®ÂÜåÂΩìÂâç‰ºöËØù
  const registerSession = (sessionId: string, userId?: string) => {
    if (wsService.isConnected()) {
      wsService.registerSession(sessionId, userId);
    }
  };

  // ËØ∑Ê±ÇÈÄöÁü•ÊùÉÈôê
  const requestNotificationPermission = async () => {
    const granted = await wsService.requestNotificationPermission();
    notificationPermission.value = Notification.permission;

    if (granted) {
      globalStore.showNotification('ÈÄöÁü•ÊùÉÈôêÂ∑≤ÂºÄÂêØ', 'success');
    } else {
      globalStore.showNotification('ÈÄöÁü•ÊùÉÈôêË¢´ÊãíÁªùÔºåÊÇ®Â∞ÜÊó†Ê≥ïÊé•Êî∂Êé®ÈÄÅÈÄöÁü•', 'warning');
    }

    return granted;
  };

  // Ê£ÄÊü•ÈÄöÁü•ÊùÉÈôêÁä∂ÊÄÅ
  const checkNotificationPermission = () => {
    if ('Notification' in window) {
      notificationPermission.value = Notification.permission;
    }
  };

  // Ëé∑ÂèñWebSocketËøûÊé•Áä∂ÊÄÅ
  const getConnectionStatus = () => {
    return {
      connected: isConnected.value,
      permission: notificationPermission.value,
      unreadCount: unreadCount.value
    };
  };

  // ÁîüÂëΩÂë®ÊúüÁÆ°ÁêÜ
  onMounted(() => {
    checkNotificationPermission();
    initializeWebSocket();
  });

  onUnmounted(() => {
    // ÁßªÈô§‰∫ã‰ª∂ÁõëÂê¨
    wsService.off('notification', handleNotification);
    wsService.off('notification_clicked', handleNotificationClick);
  });

  return {
    // Áä∂ÊÄÅ
    isConnected,
    notificationPermission,
    unreadCount,
    notifications,

    // ÊñπÊ≥ï
    requestNotificationPermission,
    registerSession,
    markNotificationAsRead,
    clearAllNotifications,
    getConnectionStatus,
    handleNotificationClick
  };
}